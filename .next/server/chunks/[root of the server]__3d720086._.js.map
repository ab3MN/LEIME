{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file://C%3A/ab3/rest-client-app/src/utils/generateRandomNumbers.ts"],"sourcesContent":["export const generateRandomNumbers = (limit: number) => Math.floor(Math.random() * limit);\r\n"],"names":[],"mappings":";;;AAAO,MAAM,wBAAwB,CAAC,QAAkB,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK","debugId":null}},
    {"offset": {"line": 168, "column": 0}, "map": {"version":3,"sources":["file://C%3A/ab3/rest-client-app/src/utils/getMemeLikes.ts"],"sourcesContent":["import { Meme } from 'types';\r\nimport { generateRandomNumbers } from './generateRandomNumbers';\r\n\r\nconst MAX_LIKES = 99;\r\n\r\nexport const getMemeLikes = (meme: Meme) => (meme.likes !== -1 ? meme.likes : generateRandomNumbers(MAX_LIKES));\r\n"],"names":[],"mappings":";;;AACA;;AAEA,MAAM,YAAY;AAEX,MAAM,eAAe,CAAC,OAAgB,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,KAAK,GAAG,CAAA,GAAA,uIAAA,CAAA,wBAAqB,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":["file://C%3A/ab3/rest-client-app/src/app/api/scalars/LocalhostURLScalar.ts"],"sourcesContent":["import { GraphQLScalarType, Kind } from 'graphql';\r\nimport { URL } from 'url';\r\n\r\nconst isAllowedLocalhost = (hostname: string) =>\r\n  hostname === 'localhost' || hostname === '127.0.0.1' || hostname.endsWith('.localhost');\r\n\r\nconst validateURL = (value: string) => {\r\n  try {\r\n    const url = new URL(value);\r\n    const { protocol, hostname } = url;\r\n\r\n    if (['http:', 'https:'].includes(protocol) && (isAllowedLocalhost(hostname) || true)) {\r\n      return url.toString();\r\n    }\r\n\r\n    throw new Error('Invalid URL');\r\n  } catch {\r\n    throw new Error('Invalid URL format');\r\n  }\r\n};\r\n\r\nexport const LocalhostURLScalar = new GraphQLScalarType({\r\n  name: 'URL',\r\n  description: 'Custom URL scalar that allows localhost',\r\n\r\n  serialize(value: string | URL) {\r\n    return new URL(value).toString();\r\n  },\r\n\r\n  parseValue: validateURL,\r\n\r\n  parseLiteral(ast) {\r\n    if (ast.kind === Kind.STRING) {\r\n      return validateURL(ast.value);\r\n    }\r\n\r\n    throw new Error('URL must be a string');\r\n  },\r\n});\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;;;AAEA,MAAM,qBAAqB,CAAC,WAC1B,aAAa,eAAe,aAAa,eAAe,SAAS,QAAQ,CAAC;AAE5E,MAAM,cAAc,CAAC;IACnB,IAAI;QACF,MAAM,MAAM,IAAI,+FAAA,CAAA,MAAG,CAAC;QACpB,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG;QAE/B,IAAI;YAAC;YAAS;SAAS,CAAC,QAAQ,CAAC,aAAa,CAAC,mBAAmB,aAAa,IAAI,GAAG;YACpF,OAAO,IAAI,QAAQ;QACrB;QAEA,MAAM,IAAI,MAAM;IAClB,EAAE,OAAM;QACN,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,MAAM,qBAAqB,IAAI,gJAAA,CAAA,oBAAiB,CAAC;IACtD,MAAM;IACN,aAAa;IAEb,WAAU,KAAmB;QAC3B,OAAO,IAAI,+FAAA,CAAA,MAAG,CAAC,OAAO,QAAQ;IAChC;IAEA,YAAY;IAEZ,cAAa,GAAG;QACd,IAAI,IAAI,IAAI,KAAK,+IAAA,CAAA,OAAI,CAAC,MAAM,EAAE;YAC5B,OAAO,YAAY,IAAI,KAAK;QAC9B;QAEA,MAAM,IAAI,MAAM;IAClB;AACF","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file://C%3A/ab3/rest-client-app/src/app/api/graphql/route.ts"],"sourcesContent":["import { ApolloServer } from '@apollo/server';\r\nimport { startServerAndCreateNextHandler } from '@as-integrations/next';\r\nimport { NextRequest } from 'next/server';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport { DateTimeResolver } from 'graphql-scalars';\r\n\r\nimport { Meme } from 'types';\r\nimport { getMemeLikes } from '@utils/getMemeLikes';\r\nimport { LocalhostURLScalar } from '../scalars/LocalhostURLScalar';\r\n\r\nimport memes from '../db/memes.json';\r\n\r\nconst memesPath = path.join(process.cwd(), 'src/app/api/db/memes.json');\r\n\r\nconst typeDefs = `#graphql\r\n    scalar URL\r\n    scalar DateTime\r\n\r\n    type Meme {\r\n      id: ID!\r\n      timestamp: DateTime!\r\n      title: String!\r\n      imgUrl: URL!\r\n      likes: Float!\r\n    }\r\n\r\n    type Query {\r\n      memes: [Meme!]!\r\n      meme(id: ID!): Meme\r\n    }\r\n\r\n    input MemeInput {\r\n      title: String!\r\n      imgUrl: URL!\r\n      likes: Float!\r\n    }\r\n\r\n    type Mutation {\r\n      updateMeme(id: ID!, data: MemeInput!): Meme\r\n    }\r\n`;\r\n\r\nconst resolvers = {\r\n  DateTime: DateTimeResolver,\r\n  URL: LocalhostURLScalar,\r\n\r\n  Query: {\r\n    memes: () => memes.map((meme: Meme) => ({ ...meme, likes: getMemeLikes(meme) })),\r\n\r\n    meme: (_: unknown, { id }: { id: string }) => {\r\n      const findedMeme = memes.find((meme) => meme.id === id);\r\n\r\n      if (!findedMeme) {\r\n        throw new Error('Meme not found');\r\n      }\r\n\r\n      return { ...findedMeme, likes: getMemeLikes(findedMeme) };\r\n    },\r\n  },\r\n\r\n  Mutation: {\r\n    updateMeme: (_: unknown, { id, data }: { id: string; data: Omit<Meme, 'timestamp' | 'id'> }) => {\r\n      const idx = memes.findIndex((meme: Meme) => meme.id === id);\r\n\r\n      if (idx === -1) throw new Error('Meme not found');\r\n\r\n      memes[idx] = { id, ...data, timestamp: new Date().toISOString() };\r\n\r\n      fs.writeFile(memesPath, JSON.stringify(memes, null, 2), (err) => {\r\n        if (err) console.error(err.message);\r\n      });\r\n\r\n      return memes[idx];\r\n    },\r\n  },\r\n};\r\n\r\nconst server = new ApolloServer({ typeDefs, resolvers });\r\n\r\nconst handler = startServerAndCreateNextHandler<NextRequest>(server);\r\n\r\nexport { handler as GET, handler as POST };\r\n"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;;;;;;;;;AAEA,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;AAE3C,MAAM,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BlB,CAAC;AAED,MAAM,YAAY;IAChB,UAAU,wOAAA,CAAA,mBAAgB;IAC1B,KAAK,oJAAA,CAAA,qBAAkB;IAEvB,OAAO;QACL,OAAO,IAAM,wGAAA,CAAA,UAAK,CAAC,GAAG,CAAC,CAAC,OAAe,CAAC;oBAAE,GAAG,IAAI;oBAAE,OAAO,CAAA,GAAA,8HAAA,CAAA,eAAY,AAAD,EAAE;gBAAM,CAAC;QAE9E,MAAM,CAAC,GAAY,EAAE,EAAE,EAAkB;YACvC,MAAM,aAAa,wGAAA,CAAA,UAAK,CAAC,IAAI,CAAC,CAAC,OAAS,KAAK,EAAE,KAAK;YAEpD,IAAI,CAAC,YAAY;gBACf,MAAM,IAAI,MAAM;YAClB;YAEA,OAAO;gBAAE,GAAG,UAAU;gBAAE,OAAO,CAAA,GAAA,8HAAA,CAAA,eAAY,AAAD,EAAE;YAAY;QAC1D;IACF;IAEA,UAAU;QACR,YAAY,CAAC,GAAY,EAAE,EAAE,EAAE,IAAI,EAAwD;YACzF,MAAM,MAAM,wGAAA,CAAA,UAAK,CAAC,SAAS,CAAC,CAAC,OAAe,KAAK,EAAE,KAAK;YAExD,IAAI,QAAQ,CAAC,GAAG,MAAM,IAAI,MAAM;YAEhC,wGAAA,CAAA,UAAK,CAAC,IAAI,GAAG;gBAAE;gBAAI,GAAG,IAAI;gBAAE,WAAW,IAAI,OAAO,WAAW;YAAG;YAEhE,6FAAA,CAAA,UAAE,CAAC,SAAS,CAAC,WAAW,KAAK,SAAS,CAAC,wGAAA,CAAA,UAAK,EAAE,MAAM,IAAI,CAAC;gBACvD,IAAI,KAAK,QAAQ,KAAK,CAAC,IAAI,OAAO;YACpC;YAEA,OAAO,wGAAA,CAAA,UAAK,CAAC,IAAI;QACnB;IACF;AACF;AAEA,MAAM,SAAS,IAAI,mKAAA,CAAA,eAAY,CAAC;IAAE;IAAU;AAAU;AAEtD,MAAM,UAAU,CAAA,GAAA,+JAAA,CAAA,kCAA+B,AAAD,EAAe","debugId":null}}]
}