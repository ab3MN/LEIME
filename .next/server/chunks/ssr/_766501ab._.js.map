{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 38, "column": 0}, "map": {"version":3,"sources":["file://C%3A/ab3/rest-client-app/src/ui/Buttons/LikeButton.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const LikeButton = registerClientReference(\n    function() { throw new Error(\"Attempted to call LikeButton() from the server but LikeButton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/ui/Buttons/LikeButton.tsx <module evaluation>\",\n    \"LikeButton\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,aAAa,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,+DACA","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file://C%3A/ab3/rest-client-app/src/ui/Buttons/LikeButton.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const LikeButton = registerClientReference(\n    function() { throw new Error(\"Attempted to call LikeButton() from the server but LikeButton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/ui/Buttons/LikeButton.tsx\",\n    \"LikeButton\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,aAAa,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,2CACA","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file://C%3A/ab3/rest-client-app/src/components/MemeList/MemeListItem.tsx"],"sourcesContent":["import { Card, CardFooter, CardHeader, Image } from '@heroui/react';\r\nimport { LikeButton } from '@ui/Buttons/LikeButton';\r\nimport { CustomLink } from '@ui/Link/Link';\r\nimport { FC, memo, ReactNode } from 'react';\r\nimport { Meme } from 'types';\r\n\r\ninterface Props {\r\n  meme: Meme;\r\n}\r\n\r\nconst MemeListItemComponent: FC<Props> = ({ meme }) => {\r\n  const { likes, title, id, imgUrl } = meme;\r\n\r\n  return (\r\n    <Card\r\n      className=\"break-inside-avoid mb-4 relative text-white font-bold\"\r\n      as=\"article\"\r\n    >\r\n      <CardHeader className=\"absolute z-100 top-0 flex-col items-start bg-black/70 rounded \">\r\n        <h4 className=\"text-sm\">\r\n          <CustomLink\r\n            href={`list/${id}`}\r\n            label={title}\r\n          />\r\n        </h4>\r\n      </CardHeader>\r\n      <Image\r\n        removeWrapper\r\n        alt={title}\r\n        className=\"w-full h-auto rounded\"\r\n        src={imgUrl}\r\n      />\r\n\r\n      <CardFooter className=\"flex justify-between items-center absolute bg-black/40 bottom-0 z-100 border-t-1 border-default-600 dark:border-default-100 p-0\">\r\n        <p className=\"text-xs pl-2\">Likes: {likes}</p>\r\n        <LikeButton likes={likes} />\r\n      </CardFooter>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport const MemeListItem = memo(MemeListItemComponent) as (props: Props) => ReactNode;\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;;AAOA,MAAM,wBAAmC,CAAC,EAAE,IAAI,EAAE;IAChD,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG;IAErC,qBACE,8OAAC,oKAAA,CAAA,OAAI;QACH,WAAU;QACV,IAAG;;0BAEH,8OAAC,oKAAA,CAAA,aAAU;gBAAC,WAAU;0BACpB,cAAA,8OAAC;oBAAG,WAAU;8BACZ,cAAA,8OAAC,0HAAA,CAAA,aAAU;wBACT,MAAM,CAAC,KAAK,EAAE,IAAI;wBAClB,OAAO;;;;;;;;;;;;;;;;0BAIb,8OAAC,oKAAA,CAAA,QAAK;gBACJ,aAAa;gBACb,KAAK;gBACL,WAAU;gBACV,KAAK;;;;;;0BAGP,8OAAC,oKAAA,CAAA,aAAU;gBAAC,WAAU;;kCACpB,8OAAC;wBAAE,WAAU;;4BAAe;4BAAQ;;;;;;;kCACpC,8OAAC,mIAAA,CAAA,aAAU;wBAAC,OAAO;;;;;;;;;;;;;;;;;;AAI3B;AAEO,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,OAAI,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 168, "column": 0}, "map": {"version":3,"sources":["file://C%3A/ab3/rest-client-app/src/components/MemeList/MemeList.tsx"],"sourcesContent":["import { FC } from 'react';\r\nimport { Meme } from 'types';\r\nimport { MemeListItem } from './MemeListItem';\r\n\r\ninterface Props {\r\n  memes: Meme[];\r\n}\r\n\r\nexport const MemeList: FC<Props> = ({ memes }) => {\r\n  return (\r\n    <ul className=\"columns-1 sm:columns-2 md:columns-3 lg:columns-4 gap-4 px-8 space-y-4\">\r\n      {memes.map((meme) => (\r\n        <li key={meme.id}>\r\n          <MemeListItem meme={meme} />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n"],"names":[],"mappings":";;;;AAEA;;;AAMO,MAAM,WAAsB,CAAC,EAAE,KAAK,EAAE;IAC3C,qBACE,8OAAC;QAAG,WAAU;kBACX,MAAM,GAAG,CAAC,CAAC,qBACV,8OAAC;0BACC,cAAA,8OAAC,8IAAA,CAAA,eAAY;oBAAC,MAAM;;;;;;eADb,KAAK,EAAE;;;;;;;;;;AAMxB","debugId":null}},
    {"offset": {"line": 203, "column": 0}, "map": {"version":3,"sources":["file://C%3A/ab3/rest-client-app/src/graphql/client.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client';\r\n\r\nconst client = new ApolloClient({\r\n  uri: `${process.env.HOST}/api/graphql`,\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nexport default client;\r\n"],"names":[],"mappings":";;;AAAA;AAAA;;AAEA,MAAM,SAAS,IAAI,0KAAA,CAAA,eAAY,CAAC;IAC9B,KAAK,GAAG,QAAQ,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC;IACtC,OAAO,IAAI,wKAAA,CAAA,gBAAa;AAC1B;uCAEe","debugId":null}},
    {"offset": {"line": 220, "column": 0}, "map": {"version":3,"sources":["file://C%3A/ab3/rest-client-app/src/graphql/meme/fragments.ts"],"sourcesContent":["import { gql } from '@apollo/client';\r\n\r\nexport const MEME_FRAGMENT = gql`\r\n  fragment MemeFragment on Meme {\r\n    id\r\n    title\r\n    imgUrl\r\n    likes\r\n    timestamp\r\n  }\r\n`;\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,gBAAgB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;AAQjC,CAAC","debugId":null}},
    {"offset": {"line": 240, "column": 0}, "map": {"version":3,"sources":["file://C%3A/ab3/rest-client-app/src/graphql/meme/queries.ts"],"sourcesContent":["import { gql } from '@apollo/client';\r\nimport { MEME_FRAGMENT } from './fragments';\r\n\r\nexport const GET_MEMES = gql`\r\n  query GetMemes {\r\n    memes {\r\n      ...MemeFragment\r\n    }\r\n  }\r\n  ${MEME_FRAGMENT}\r\n`;\r\n\r\nexport const GET_MEME = gql`\r\n  query GetMeme($id: ID!) {\r\n    meme(id: $id) {\r\n      ...MemeFragment\r\n    }\r\n  }\r\n  ${MEME_FRAGMENT}\r\n`;\r\n\r\nexport const UPDATE_MEME = gql`\r\n  mutation UpdateMeme($id: ID!, $data: MemeInput!) {\r\n    updateMeme(id: $id, data: $data) {\r\n      ...MemeFragment\r\n    }\r\n  }\r\n  ${MEME_FRAGMENT}\r\n`;\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;;;AAEO,MAAM,YAAY,8IAAA,CAAA,MAAG,CAAC;;;;;;EAM3B,EAAE,mIAAA,CAAA,gBAAa,CAAC;AAClB,CAAC;AAEM,MAAM,WAAW,8IAAA,CAAA,MAAG,CAAC;;;;;;EAM1B,EAAE,mIAAA,CAAA,gBAAa,CAAC;AAClB,CAAC;AAEM,MAAM,cAAc,8IAAA,CAAA,MAAG,CAAC;;;;;;EAM7B,EAAE,mIAAA,CAAA,gBAAa,CAAC;AAClB,CAAC","debugId":null}},
    {"offset": {"line": 279, "column": 0}, "map": {"version":3,"sources":["file://C%3A/ab3/rest-client-app/src/graphql/meme/api.ts"],"sourcesContent":["import client from '../client';\r\nimport { Meme } from 'types/meme.type';\r\nimport { GET_MEME, GET_MEMES, UPDATE_MEME } from './queries';\r\n\r\nexport const getMemes = async () => {\r\n  const res = await client.query<{ memes: Meme[] }>({\r\n    query: GET_MEMES,\r\n  });\r\n\r\n  return res.data.memes;\r\n};\r\n\r\nexport const getMeme = async (id: string) => {\r\n  const res = await client.query<{ meme: Meme }>({\r\n    query: GET_MEME,\r\n    variables: { id },\r\n  });\r\n\r\n  return res.data.meme;\r\n};\r\n\r\nexport const updateMeme = async (id: string, meme: Omit<Meme, 'timestamp' | 'id'>) => {\r\n  const res = await client.mutate({\r\n    mutation: UPDATE_MEME,\r\n    variables: { id, data: meme },\r\n  });\r\n\r\n  return res.data.updateMeme;\r\n};\r\n"],"names":[],"mappings":";;;;;AAAA;AAEA;;;AAEO,MAAM,WAAW;IACtB,MAAM,MAAM,MAAM,wHAAA,CAAA,UAAM,CAAC,KAAK,CAAoB;QAChD,OAAO,iIAAA,CAAA,YAAS;IAClB;IAEA,OAAO,IAAI,IAAI,CAAC,KAAK;AACvB;AAEO,MAAM,UAAU,OAAO;IAC5B,MAAM,MAAM,MAAM,wHAAA,CAAA,UAAM,CAAC,KAAK,CAAiB;QAC7C,OAAO,iIAAA,CAAA,WAAQ;QACf,WAAW;YAAE;QAAG;IAClB;IAEA,OAAO,IAAI,IAAI,CAAC,IAAI;AACtB;AAEO,MAAM,aAAa,OAAO,IAAY;IAC3C,MAAM,MAAM,MAAM,wHAAA,CAAA,UAAM,CAAC,MAAM,CAAC;QAC9B,UAAU,iIAAA,CAAA,cAAW;QACrB,WAAW;YAAE;YAAI,MAAM;QAAK;IAC9B;IAEA,OAAO,IAAI,IAAI,CAAC,UAAU;AAC5B","debugId":null}},
    {"offset": {"line": 319, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 340, "column": 0}, "map": {"version":3,"sources":["file://C%3A/ab3/rest-client-app/src/hocs/withMemes.tsx"],"sourcesContent":["import { getMemes } from '@graphql/meme';\r\nimport React from 'react';\r\nimport { Meme } from 'types';\r\n\r\ntype WithMemesProps = {\r\n  memes: Meme[];\r\n};\r\n\r\nexport const withMemes = <P extends object>(Component: React.ComponentType<P & WithMemesProps>) => {\r\n  return async function WrappedComponent(props: P) {\r\n    const memes = await getMemes();\r\n\r\n    return (\r\n      <Component\r\n        {...props}\r\n        memes={memes}\r\n      />\r\n    );\r\n  };\r\n};\r\n"],"names":[],"mappings":";;;;AAAA;AAAA;;;AAQO,MAAM,YAAY,CAAmB;IAC1C,OAAO,eAAe,iBAAiB,KAAQ;QAC7C,MAAM,QAAQ,MAAM,CAAA,GAAA,6HAAA,CAAA,WAAQ,AAAD;QAE3B,qBACE,8OAAC;YACE,GAAG,KAAK;YACT,OAAO;;;;;;IAGb;AACF","debugId":null}},
    {"offset": {"line": 367, "column": 0}, "map": {"version":3,"sources":["file://C%3A/ab3/rest-client-app/src/app/list/page.tsx"],"sourcesContent":["import { MemeList } from '@components/MemeList/MemeList';\r\nimport { withMemes } from 'hocs/withMemes';\r\n\r\nexport default withMemes(MemeList);\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;uCAEe,CAAA,GAAA,yHAAA,CAAA,YAAS,AAAD,EAAE,0IAAA,CAAA,WAAQ","debugId":null}}]
}